package org.api.tests;

import com.github.javafaker.Faker;
import io.restassured.response.Response;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.api.listeners.TestListener;
import org.api.models.request.LoginRequest;
import org.api.models.request.SignUpRequest;
import org.api.models.response.LoginResponse;
import org.api.services.AuthService;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;

/**
 * Test class for authentication-related API endpoints.
 * This class contains test cases for account creation, login, and forgot password functionalities.
 */
@Listeners(TestListener.class)
public class AuthTest {
    private static final Logger logger = LogManager.getLogger(AuthTest.class);
    private AuthService authService;

    /**
     * Initializes the AuthService instance before running the test cases.
     */
    @BeforeClass
    public void setup() {
        authService = new AuthService();
    }

    /**
     * Test to verify the account creation functionality.
     * This test uses random data generated by Faker to create a new user account.
     * It asserts that the response status code is 200 and the response message matches the expected value.
     */
    @Test(description = "Verify the account creation functionality.")
    public void createAccountTest() {
        Faker faker = Faker.instance();
        SignUpRequest signUpRequest = new SignUpRequest.SignUpBuilder()
                .setUsername(faker.name().username())
                .setPassword(faker.internet().password())
                .setFirstName(faker.name().firstName())
                .setLastName(faker.name().lastName())
                .setEmail(faker.internet().emailAddress())
                .setMobileNumber(faker.phoneNumber().phoneNumber())
                .build();
        System.out.println(signUpRequest.toString());
        Response response = authService.signup(signUpRequest);
        // Assert.assertEquals(response.getStatusCode(), 200);
        Assert.assertEquals(response.asPrettyString(), "User registered successfully!");
    }

    /**
     * Test to verify the login functionality.
     * This test sends a login request with predefined credentials and validates the response.
     * It asserts that the response status code is 200, the token is not null, and the email matches the expected value.
     */
    @Test(description = "Verify if login API is working.")
    public void loginTest() {
        LoginRequest loginRequest = new LoginRequest.Builder()
                .username("ranga.gowda")
                .password("Gowda@890131").build();

        Response response = authService.login(loginRequest);

        LoginResponse loginResponse = response.as(LoginResponse.class);

        Assert.assertEquals(response.getStatusCode(), 200);
        Assert.assertNotNull(loginResponse.getToken());
        Assert.assertEquals(loginResponse.getEmail(), "rangegowda8901@gmail.com");
    }

    /**
     * Test to verify the forgot password functionality.
     * This test sends a forgot password request with a test email and validates the response.
     * It asserts that the response status code is 200.
     */
    @Test(description = "Verify if forgot password API is working.")
    public void forgotPasswordTest() {
        Response response = authService.forgotPassword("Test.tset1342@gmail.com");
        logger.info("Received response for forgot password: " + response.asPrettyString());
        System.out.println(response.asPrettyString());
        Assert.assertEquals(response.getStatusCode(), 200);
        logger.info("Forgot password test completed successfully.");
    }
}